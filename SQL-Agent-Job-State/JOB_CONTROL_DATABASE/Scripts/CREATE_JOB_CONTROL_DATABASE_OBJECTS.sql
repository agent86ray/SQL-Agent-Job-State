/*

Deployment script for JOB_CONTROL

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.

*/

SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "JOB_CONTROL"
:setvar DefaultFilePrefix "JOB_CONTROL"
:setvar DefaultDataPath "C:\Program Files\Microsoft SQL Server\MSSQL15.MSSQLSERVER\MSSQL\DATA\"
:setvar DefaultLogPath "C:\Program Files\Microsoft SQL Server\MSSQL15.MSSQLSERVER\MSSQL\DATA\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [$(DatabaseName)];


GO
PRINT N'Creating [dbo].[STATE]...';


GO
CREATE TABLE [dbo].[STATE] (
    [STATE_ID]      BIGINT          NOT NULL,
    [NAME]          NVARCHAR (50)   NOT NULL,
    [CUSTOM_STATE]  NVARCHAR (4000) NULL,
    [LAST_MODIFIED] DATETIME        NOT NULL,
    PRIMARY KEY CLUSTERED ([STATE_ID] ASC)
);


GO
PRINT N'Creating [dbo].[DF_STATE_LAST_MODIFIED]...';


GO
ALTER TABLE [dbo].[STATE]
    ADD CONSTRAINT [DF_STATE_LAST_MODIFIED] DEFAULT GETDATE() FOR [LAST_MODIFIED];


GO
PRINT N'Creating [dbo].[STATE_ID_SEQUENCE]...';


GO
CREATE SEQUENCE [dbo].[STATE_ID_SEQUENCE]
    AS BIGINT
    START WITH 1
    INCREMENT BY 1
    CACHE 10;


GO
PRINT N'Creating [dbo].[DF_STATE_STATE_ID]...';


GO
ALTER TABLE [dbo].[STATE]
    ADD CONSTRAINT [DF_STATE_STATE_ID] DEFAULT NEXT VALUE FOR [dbo].[STATE_ID_SEQUENCE] FOR [STATE_ID];


GO
PRINT N'Creating [dbo].[CREATE_STATE]...';


GO
CREATE PROCEDURE [dbo].[CREATE_STATE]
	@NAME	NVARCHAR(50)
AS
BEGIN
	INSERT [dbo].[STATE] (
		[NAME]
	)
	VALUES (
		@NAME
	);

	SELECT 
		*
	FROM [dbo].[STATE]
	ORDER BY [STATE_ID] DESC;
END
GO
PRINT N'Creating [dbo].[GET_END_JOB_INSTANCE_ID]...';


GO
CREATE PROCEDURE [dbo].[GET_END_JOB_INSTANCE_ID]
AS
BEGIN
	DECLARE @MAX_JOB_INSTANCE_ID INT = NULL;

	SELECT
		@MAX_JOB_INSTANCE_ID = MAX([instance_id])
	FROM [msdb].[dbo].[sysjobhistory];
	
	SELECT COALESCE(@MAX_JOB_INSTANCE_ID, 0);	
END
GO
PRINT N'Creating [dbo].[GET_STATE]...';


GO
CREATE PROCEDURE [dbo].[GET_STATE]
	@P_STATE_ID		BIGINT
,	@P_CUSTOM_STATE	NVARCHAR(4000) OUTPUT
AS
BEGIN
	DECLARE @CUSTOM_STATE	NVARCHAR(4000);

	SELECT
		@CUSTOM_STATE = [CUSTOM_STATE]
	FROM [dbo].[STATE]
	WHERE [STATE_ID] = @P_STATE_ID;

	SET @P_CUSTOM_STATE = COALESCE(@CUSTOM_STATE, N'');
END
GO
PRINT N'Creating [dbo].[INITIALIZE_STATE]...';


GO
/*

	This procedure should be called as the first step in a SQL Agent job.
	The purpose is to set the CUSTOM_STATE based on the needs of the job
	and overwrite any state that exists from a previous execution of the 
	SQL Agent job.

*/
CREATE PROCEDURE [dbo].[INITIALIZE_STATE]
	@STATE_ID		BIGINT
,	@CUSTOM_STATE	NVARCHAR(4000) = NULL
AS
BEGIN
	UPDATE [dbo].[STATE]
	SET
		CUSTOM_STATE = @CUSTOM_STATE
	WHERE [STATE_ID] = @STATE_ID;

	IF @@ROWCOUNT = 0
		INSERT [dbo].[STATE] (
			[STATE_ID]
		,	[NAME]
		,	[CUSTOM_STATE]
		)
		VALUES (
			@STATE_ID
		,	CONCAT(
				N'STATE FOR STATE_ID = '
			,	CONVERT(NVARCHAR(20), @STATE_ID)
			)
		,	@CUSTOM_STATE
		);
END
GO
PRINT N'Creating [dbo].[RETRIEVE_STATE]...';


GO
CREATE PROCEDURE [dbo].[RETRIEVE_STATE]
	@STATE_ID		BIGINT
AS
BEGIN
	SELECT
		COALESCE([CUSTOM_STATE], N'') AS [CUSTOM_STATE]
	,	[LAST_MODIFIED]
	FROM [dbo].[STATE];
END
GO
PRINT N'Creating [dbo].[UPDATE_STATE]...';


GO
/*
	This procedure should be called in each SQL Agent job step where there 
	are changes to the state that need to be persisted. The thought is that 
	ths procedure would be called when the SSIS package is done (either successfully
	or has failed).

*/
CREATE PROCEDURE [dbo].[UPDATE_STATE]
	@STATE_ID		BIGINT
,	@CUSTOM_STATE	NVARCHAR(4000) = NULL
AS
BEGIN
	UPDATE [dbo].[STATE]
	SET
		CUSTOM_STATE = @CUSTOM_STATE
	WHERE [STATE_ID] = @STATE_ID;
END
GO
PRINT N'Creating [dbo].[UPDATE_STATE_INT_VALUE]...';


GO
CREATE PROCEDURE [dbo].[UPDATE_STATE_INT_VALUE]
	@STATE_ID		BIGINT
,	@PATH			NVARCHAR(50)
,	@INT_VALUE		INT
AS
BEGIN
	UPDATE [dbo].[STATE]
	SET
		CUSTOM_STATE = JSON_MODIFY(CUSTOM_STATE, @PATH, @INT_VALUE)
	WHERE [STATE_ID] = @STATE_ID;
END
GO
PRINT N'Update complete.';


GO
